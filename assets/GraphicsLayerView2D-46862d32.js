import{a4 as a,at as p,ae as o,r as g,am as s,an as m,ao as l}from"./index-8fbc1f4a.js";import{f as c,u as n}from"./LayerView-9425716a.js";import{i as d}from"./GraphicContainer-fe8cbbd8.js";import{a as u}from"./GraphicsView2D-f5cde1d4.js";import"./Container-f524c24f.js";import"./Texture-48a7e7ed.js";import"./color-0cdbba8e.js";import"./BaseGraphicContainer-d069d938.js";import"./FeatureContainer-fce70085.js";import"./AttributeStoreView-44c586b8.js";import"./TiledDisplayObject-19d7aaeb.js";import"./visualVariablesUtils-9dc0d763.js";import"./visualVariablesUtils-ab12c831.js";import"./VertexArrayObject-ad65279e.js";import"./TileContainer-57541675.js";import"./WGLContainer-1491f5d4.js";import"./ProgramTemplate-54cc5081.js";import"./MaterialKey-0425a2bf.js";import"./utils-12e92814.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./vec3f32-ad1dc57f.js";import"./ExpandedCIM-8dc9997f.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-b1acddf1.js";import"./floatRGBA-d89ff3f4.js";import"./normalizeUtilsSync-9d0e781a.js";import"./projectionSupport-1c7f552c.js";import"./json-48e3ea08.js";import"./Matcher-70491a53.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-7e49d300.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-620c4095.js";import"./util-fbf35b84.js";import"./ComputedAttributeStorage-7bdb9893.js";import"./arcadeTimeUtils-575b61c4.js";import"./executionError-fb3f283a.js";import"./centroid-ed7b98e0.js";const w={remove(){},pause(){},resume(){}};let r=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=a(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof p?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):o.isCollection(i)&&i.length>0&&(t=i.map(e=>e&&e.uid).toArray());const h=t==null?void 0:t.filter(g);return h!=null&&h.length?(this._addHighlight(h),{remove:()=>this._removeHighlight(h)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],r.prototype,"graphicsView",void 0),r=s([l("esri.views.2d.layers.GraphicsLayerView2D")],r);const ri=r;export{ri as default};
