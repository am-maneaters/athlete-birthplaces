import{af as w,ag as y,ah as I,ai as V,a6 as v,aj as H,j as p,ak as c,al as T,am as o,an as g,ao as q}from"./index-8fbc1f4a.js";import"./MagnifierPrograms-1fc51fa6.js";import"./Container-f524c24f.js";import"./BufferPool-d1322519.js";import"./color-0cdbba8e.js";import"./WGLContainer-1491f5d4.js";import"./Texture-48a7e7ed.js";import"./ProgramTemplate-54cc5081.js";import"./MaterialKey-0425a2bf.js";import"./utils-12e92814.js";import"./VertexArrayObject-ad65279e.js";import"./OrderIndependentTransparency-bface1b8.js";import"./floatRGBA-d89ff3f4.js";import"./webgl-debug-b1f7a2c5.js";import{a as U}from"./GraphicsView2D-f5cde1d4.js";import"./AttributeStoreView-44c586b8.js";import"./earcut-61f7b102.js";import"./vec3f32-ad1dc57f.js";import{t as Q,o as f,n as d}from"./imageUtils-a6d2ba82.js";import{f as S,u as b}from"./LayerView-9425716a.js";import{n as C}from"./HighlightGraphicContainer-7213875d.js";import{i as k}from"./RefreshableLayerView-1ecd7b2c.js";import{P as F,S as P,a as G}from"./drapedUtils-d88cfea6.js";import"./_commonjsHelpers-2f3e7994.js";import"./ExpandedCIM-8dc9997f.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-b1acddf1.js";import"./rasterizingUtils-7d81a3d0.js";import"./GeometryUtils-dd03fc25.js";import"./imageutils-5b2bba96.js";import"./Matcher-70491a53.js";import"./visualVariablesUtils-9dc0d763.js";import"./visualVariablesUtils-ab12c831.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-7e49d300.js";import"./devEnvironmentUtils-5002a058.js";import"./CircularArray-0e7ce01a.js";import"./ComputedAttributeStorage-7bdb9893.js";import"./arcadeTimeUtils-575b61c4.js";import"./executionError-fb3f283a.js";import"./centroid-ed7b98e0.js";import"./config-1337d16e.js";import"./basicInterfaces-b7051eb1.js";import"./normalizeUtilsSync-9d0e781a.js";import"./projectionSupport-1c7f552c.js";import"./json-48e3ea08.js";import"./schemaUtils-620c4095.js";import"./util-fbf35b84.js";import"./TiledDisplayObject-19d7aaeb.js";import"./BitmapTileContainer-e56683e1.js";import"./Bitmap-bb24affb.js";import"./TileContainer-57541675.js";import"./BaseGraphicContainer-d069d938.js";import"./FeatureContainer-fce70085.js";import"./scaleUtils-775435de.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-d43ae64c.js";import"./popupUtils-4e2ec011.js";const R=[0,0];let h=class extends k(Q(S(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),F(this,this.layer)){const e=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new P({createFetchPopupFeaturesQueryGeometry:(i,r)=>G(i,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(i,r)=>{e.graphicUpdateHandler({graphic:i,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:n=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!p(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(n<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const m=new c(u),_=await this.fetchTile(m,{...e,resamplingLevel:n+1});return d(this._tileInfoView,_,m,t)}}throw s}const a=new c(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,a,{signal:r}),a.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);l=await this._fetchImage(a,r)}catch(s){if(p(s))throw s;l=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,l,a,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){p(e)||T.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};o([g()],h.prototype,"_fetchQueue",void 0),o([g()],h.prototype,"resampling",null),h=o([q("esri.views.2d.layers.TileLayerView2D")],h);const At=h;export{At as default};
