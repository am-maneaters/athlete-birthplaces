import{ae as l,ca as u,r as a,a7 as m,t as _,a6 as g,am as p,an as d,ao as w}from"./index-8fbc1f4a.js";import{b as y,h as f,O as k,g as M,f as v,a as I,D as V}from"./Stop-6c80785d.js";import{f as G,u as F}from"./LayerView-9425716a.js";import{i as H}from"./GraphicContainer-fe8cbbd8.js";import{a as C}from"./GraphicsView2D-f5cde1d4.js";import"./Container-f524c24f.js";import"./Texture-48a7e7ed.js";import"./color-0cdbba8e.js";import"./BaseGraphicContainer-d069d938.js";import"./FeatureContainer-fce70085.js";import"./AttributeStoreView-44c586b8.js";import"./TiledDisplayObject-19d7aaeb.js";import"./visualVariablesUtils-9dc0d763.js";import"./visualVariablesUtils-ab12c831.js";import"./VertexArrayObject-ad65279e.js";import"./TileContainer-57541675.js";import"./WGLContainer-1491f5d4.js";import"./ProgramTemplate-54cc5081.js";import"./MaterialKey-0425a2bf.js";import"./utils-12e92814.js";import"./config-1337d16e.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./vec3f32-ad1dc57f.js";import"./ExpandedCIM-8dc9997f.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-b1acddf1.js";import"./floatRGBA-d89ff3f4.js";import"./normalizeUtilsSync-9d0e781a.js";import"./projectionSupport-1c7f552c.js";import"./json-48e3ea08.js";import"./Matcher-70491a53.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-7e49d300.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-620c4095.js";import"./util-fbf35b84.js";import"./ComputedAttributeStorage-7bdb9893.js";import"./arcadeTimeUtils-575b61c4.js";import"./executionError-fb3f283a.js";import"./centroid-ed7b98e0.js";const b=Object.freeze({remove(){},pause(){},resume(){}}),U=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],h={graphic:null,property:null,oldValue:null,newValue:null};function c(e){return e instanceof y||e instanceof f||e instanceof k||e instanceof M||e instanceof v||e instanceof I||e instanceof V}function O(e){return l.isCollection(e)&&e.length&&c(e.getItemAt(0))}function A(e){return Array.isArray(e)&&e.length>0&&c(e[0])}let o=class extends G(F){constructor(){super(...arguments),this._graphics=new l,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map}get _routeItems(){return new u({getCollections:()=>a(this.layer)&&!this.destroyed?[a(this.layer.routeInfo)?new l([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]:[]})}initialize(){this.updatingHandles.addOnCollectionChange(()=>this._routeItems,e=>this._routeItemsChanged(e),m)}destroy(){var e;this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),(e=this._get("_routeItems"))==null||e.destroy()}attach(){this._createGraphicsView()}detach(){this._destroyGraphicsView()}async fetchPopupFeatures(e){return this._graphicsView.hitTest(e).filter(t=>!!t.popupTemplate)}highlight(e){let t;t=c(e)?[this._getNetworkFeatureUid(e)]:A(e)?e.map(r=>this._getNetworkFeatureUid(r)):O(e)?e.map(r=>this._getNetworkFeatureUid(r)).toArray():[e.uid];const i=t.filter(a);return i.length?(this._addHighlight(i),{remove:()=>this._removeHighlight(i)}):b}async hitTest(e,t){if(this.suspended)return null;const i=this._graphicsView.hitTest(e).filter(a).map(s=>this._networkGraphicMap.get(s));if(!i.length)return null;const{layer:r}=this;return i.reverse().map(s=>({type:"route",layer:r,mapPoint:e,networkFeature:s}))}isUpdating(){return this._graphicsView.updating}moveStart(){}moveEnd(){}update(e){this._graphicsView.processUpdate(e)}viewChange(){this._graphicsView.viewChange()}_addHighlight(e){for(const t of e)if(this._highlightIds.has(t)){const i=this._highlightIds.get(t);this._highlightIds.set(t,i+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_createGraphic(e){const t=e.toGraphic();return t.layer=this.layer,t.sourceLayer=this.layer,t}_createGraphicsView(){const e=this.view,t=()=>this.requestUpdate(),i=new H(e.featuresTilingScheme);this._graphicsView=new C({container:i,graphics:this._graphics,requestUpdateCallback:t,view:e}),this.container.addChild(i),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(e){const t=this._networkGraphicMap.get(e);return U.indexOf(t.type)}_getNetworkFeatureUid(e){return this._networkFeatureMap.has(e)?this._networkFeatureMap.get(e).uid:null}_removeHighlight(e){for(const t of e)if(this._highlightIds.has(t)){const i=this._highlightIds.get(t)-1;i===0?this._highlightIds.delete(t):this._highlightIds.set(t,i)}this._updateHighlight()}_routeItemsChanged(e){if(e.removed.length){this._graphics.removeMany(e.removed.map(t=>{const i=this._networkFeatureMap.get(t);return this._networkFeatureMap.delete(t),this._networkGraphicMap.delete(i),i}));for(const t of e.removed)this.removeHandles(t)}if(e.added.length){this._graphics.addMany(e.added.map(t=>{const i=this._createGraphic(t);return _(i.symbol)?null:(this._networkFeatureMap.set(t,i),this._networkGraphicMap.set(i,t),i)}).filter(a));for(const t of e.added)this.addHandles([g(()=>t.geometry,(i,r)=>{this._updateGraphic(t,"geometry",i,r)}),g(()=>t.symbol,(i,r)=>{this._updateGraphic(t,"symbol",i,r)})],t);this._graphics.sort((t,i)=>this._getDrawOrder(t)-this._getDrawOrder(i))}}_updateGraphic(e,t,i,r){if(!this._networkFeatureMap.has(e)){const n=this._createGraphic(e);return this._networkFeatureMap.set(e,n),this._networkGraphicMap.set(n,e),void this._graphics.add(n)}const s=this._networkFeatureMap.get(e);s[t]=i,h.graphic=s,h.property=t,h.oldValue=r,h.newValue=i,this._graphicsView.graphicUpdateHandler(h)}_updateHighlight(){const e=Array.from(this._highlightIds.keys());this._graphicsView.setHighlight(e)}};p([d()],o.prototype,"_graphics",void 0),p([d()],o.prototype,"_routeItems",null),o=p([w("esri.views.2d.layers.RouteLayerView2D")],o);const Me=o;export{Me as default};
