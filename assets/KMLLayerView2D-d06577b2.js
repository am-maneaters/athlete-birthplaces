import{aS as k,aE as U,P as I,G as D,A as L,q,Y as O,V as F,aT as $,U as W,af as M,ae as Y,a6 as H,a5 as K,a4 as S,az as j,r as P,t as J,aU as X,aV as G,aW as Q,aX as N,aY as Z,aZ as tt,am as V,an as v,ao as et}from"./index-fc217036.js";import{b as R,g as it,d as at}from"./kmlUtils-be1fdd1b.js";import{T as st,S as rt,R as ot}from"./Bitmap-24ff5ab6.js";import{a as nt}from"./BitmapContainer-fcb86f7d.js";import{f as lt,u as ht}from"./LayerView-18928023.js";import{i as T}from"./GraphicContainer-6192f84f.js";import{a as E}from"./GraphicsView2D-8909d743.js";import{C as pt,$ as mt}from"./rasterProjectionHelper-c980876a.js";import{n as ct}from"./WGLContainer-38e27347.js";import{I as dt,o as gt}from"./RenderingContext-5f0c6f9e.js";import{x as ut}from"./VertexArrayObject-33e28580.js";import{l as _t}from"./rasterUtils-31c43b81.js";import{E as B}from"./Texture-ed549a22.js";import"./Container-0a5856ba.js";import"./color-3dc775af.js";import"./BaseGraphicContainer-d1b4bad6.js";import"./FeatureContainer-82573e9c.js";import"./AttributeStoreView-64d6c0bb.js";import"./TiledDisplayObject-cce2f330.js";import"./visualVariablesUtils-0ff7c26e.js";import"./visualVariablesUtils-32f3c816.js";import"./TileContainer-3311ba48.js";import"./utils-9e2add98.js";import"./MaterialKey-aaa20868.js";import"./vec3f32-ad1dc57f.js";import"./ExpandedCIM-cda39ed7.js";import"./BidiEngine-836b7ef6.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-0ef79db0.js";import"./floatRGBA-e63ff39f.js";import"./normalizeUtilsSync-39e5d849.js";import"./projectionSupport-87ba1890.js";import"./json-48e3ea08.js";import"./Matcher-40a2b97d.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-1d162d93.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./devEnvironmentUtils-5002a058.js";import"./schemaUtils-c62bc5d8.js";import"./util-b42276b2.js";import"./ComputedAttributeStorage-c32f454f.js";import"./arcadeTimeUtils-f7f66cb8.js";import"./executionError-fb3f283a.js";import"./centroid-5d3c504b.js";import"./ProgramTemplate-da079708.js";import"./config-1337d16e.js";import"./programUtils-d89ab75a.js";import"./NestedMap-1b5db22e.js";import"./OrderIndependentTransparency-d9d5ea99.js";import"./basicInterfaces-b7051eb1.js";import"./doublePrecisionUtils-e3c3d0d8.js";import"./webgl-debug-b1f7a2c5.js";class p{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(p._instance)return p._instanceRefCount++,p._instance;p._instanceRefCount=1,p._instance=this,this._ownsRctx=!0;const i=document.createElement("canvas").getContext("webgl");i.getExtension("OES_texture_float"),this._rctx=new dt(i,{})}const s={applyProjection:!0,bilinear:!1,bicubic:!1},r=gt("raster/reproject","raster/reproject",new Map([["a_position",0]]),s);this._program=this._rctx.programCache.acquire(r.shaders.vertexShader,r.shaders.fragmentShader,r.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new ct(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,s,r=!1){const i=k(t.extent,s),a=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:o,y:l}=pt(a,s,t.extent);let h=(o+l)/2;const n=Math.round((i.xmax-i.xmin)/h),d=Math.round((i.ymax-i.ymin)/h);h=(i.width/n+i.height/d)/2;const C=new U({x:h,y:h,spatialReference:i.spatialReference}),w=mt({projectedExtent:i,srcBufferExtent:t.extent,pixelSize:C,hasWrapAround:!0,spacing:[16,16]}),x=_t(this._rctx,w),u=new B(this._rctx,{width:n,height:d,pixelFormat:I.RGBA,dataType:D.UNSIGNED_BYTE,wrapMode:L.CLAMP_TO_EDGE,samplingMode:q.LINEAR,hasMipmap:!1}),m=new ut(this._rctx,{colorTarget:O.TEXTURE,depthStencilTarget:F.NONE,width:n,height:d},u);this._rctx.bindFramebuffer(m),this._rctx.setViewport(0,0,n,d),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:y=0,height:f=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",y,f),this._program.setUniform2fv("u_transformSpacing",w.spacing),this._program.setUniform2fv("u_transformGridSize",w.size),this._program.setUniform2f("u_targetImageSize",n,d),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),r){const{width:_=0,height:c=0}=m.descriptor,b=new ImageData(_,c);return m.readPixels(0,0,_,c,I.RGBA,D.UNSIGNED_BYTE,b.data),m.detachColorTexture($.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i,imageData:b}}return m.detachColorTexture($.COLOR_ATTACHMENT0),m.dispose(),{texture:u,extent:i}}reprojectBitmapData(t,s){const r=st(t.bitmapData)?rt(t.bitmapData):t.bitmapData,i=new B(this._rctx,{width:t.bitmapData.width,height:t.bitmapData.height,pixelFormat:I.RGBA,dataType:D.UNSIGNED_BYTE,wrapMode:L.CLAMP_TO_EDGE,samplingMode:q.LINEAR,hasMipmap:!1},r),a=this.reprojectTexture({texture:i,extent:t.extent},s,!0);a.texture.dispose();const o=document.createElement("canvas"),l=a.imageData;return o.width=l.width,o.height=l.height,o.getContext("2d").putImageData(l,0,0),{bitmapData:o,extent:a.extent}}async loadAndReprojectBitmapData(t,s,r){const i=(await W(t,{responseType:"image"})).data,a=document.createElement("canvas");a.width=i.width,a.height=i.height;const o=a.getContext("2d");o.drawImage(i,0,0);const l=o.getImageData(0,0,a.width,a.height);if(s.spatialReference.equals(r))return{bitmapData:l,extent:s};const h=this.reprojectBitmapData({bitmapData:l,extent:s},r);return{bitmapData:h.bitmapData,extent:h.extent}}destroy(){this._ownsRctx?(p._instanceRefCount--,p._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),p._instance=null)):(this._quad.dispose(),this._program.dispose())}}p._instanceRefCount=0;class z{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let g=class extends lt(ht){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new nt,this._kmlVisualData=new z,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new Y}async hitTest(e,t){var r,i,a;const s=this.layer;return[(r=this._pointsView)==null?void 0:r.hitTest(e),(i=this._polylinesView)==null?void 0:i.hitTest(e),(a=this._polygonsView)==null?void 0:a.hitTest(e)].flat().filter(Boolean).map(o=>(o.layer=s,o.sourceLayer=s,{type:"graphic",graphic:o,layer:s,mapPoint:e}))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new E({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new E({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new E({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new T(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",e=>{e.added.forEach(t=>this._addMapImage(t)),e.removed.forEach(t=>this._removeMapImage(t))}),H(()=>this.layer.visibleSublayers,e=>{for(const[t,s]of this._kmlVisualData.allSublayers)s.visibility=0;for(const t of e){const s=this._kmlVisualData.allSublayers.get(t.id);s&&(s.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new p}detach(){this._fetchController=K(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=S(this._polygonsView),this._polylinesView=S(this._polylinesView),this._pointsView=S(this._pointsView),this._imageReprojector=S(this._imageReprojector)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){var t,s;((t=this.view.spatialReference)!=null&&t.isWGS84||(s=this.view.spatialReference)!=null&&s.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(e.href,j.fromJSON(e.extent),this.view.spatialReference).then(r=>{const i=new ot(r.bitmapData,{immutable:!1,requestRenderOnSourceChangedEnabled:!0});i.x=r.extent.xmin,i.y=r.extent.ymax,i.resolution=r.extent.width/r.bitmapData.width,i.rotation=e.rotation,this._mapImageContainer.addChild(i),this._bitmapIndex.set(e,i)})}async _getViewDependentUrl(e,t){const{viewFormat:s,viewBoundScale:r,httpQuery:i}=e;if(P(s)){if(J(t))throw new Error("Loading this network link requires a view state.");let a;if(await X(),P(r)&&r!==1){const c=new j(t.extent);c.expand(r),a=c}else a=t.extent;a=k(a,G.WGS84);const o=k(a,G.WebMercator),l=a.xmin,h=a.xmax,n=a.ymin,d=a.ymax,C=t.size[0]*t.pixelRatio,w=t.size[1]*t.pixelRatio,x=Math.max(o.width,o.height),u={"[bboxWest]":l.toString(),"[bboxEast]":h.toString(),"[bboxSouth]":n.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":C.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":Q,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},m=c=>{for(const b in c)for(const A in u)c[b]=c[b].replace(A,u[A])},y=N(s);m(y);let f={};P(i)&&(f=N(i),m(f));const _=Z(e.href);return _.query={..._.query,...y,...f},`${_.path}?${tt(y)}`}return e.href}async _fetchService(e){const t=new z;await this._loadVisualData(this.layer.url,t,e),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(e=>this._isSublayerVisible(e.sublayerId)).map(({item:e})=>e))}_isSublayerVisible(e){const t=this._kmlVisualData.allSublayers.get(e);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(e,t,s){return this._fetchParsedKML(e,s).then(async r=>{for(const i of r.sublayers){t.allSublayers.set(i.id,i);const a=i.points?await R(i.points):[],o=i.polylines?await R(i.polylines):[],l=i.polygons?await R(i.polygons):[],h=i.mapImages||[];if(t.allPoints.push(...a.map(n=>({item:n,sublayerId:i.id}))),t.allPolylines.push(...o.map(n=>({item:n,sublayerId:i.id}))),t.allPolygons.push(...l.map(n=>({item:n,sublayerId:i.id}))),t.allMapImages.push(...h.map(n=>({item:n,sublayerId:i.id}))),i.networkLink){const n=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(n,t,s)}}})}_fetchParsedKML(e,t){return it(e,this.layer.spatialReference,this.layer.refreshInterval,t).then(s=>at(s.data))}_removeMapImage(e){const t=this._bitmapIndex.get(e);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(e))}};V([v()],g.prototype,"_pointsView",void 0),V([v()],g.prototype,"_polylinesView",void 0),V([v()],g.prototype,"_polygonsView",void 0),V([v()],g.prototype,"updating",void 0),g=V([et("esri.views.2d.layers.KMLLayerView2D")],g);const _e=g;export{_e as default};
//# sourceMappingURL=KMLLayerView2D-d06577b2.js.map
